---
http_interactions:
- request:
    method: get
    uri: https://www.louisvilleco.gov/local-government/government/departments/parks-recreation-and-open-space/parks-division/dog-off-leash-areas
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Sec-Ch-Ua:
      - '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"'
      Sec-Ch-Ua-Mobile:
      - "?0"
      Sec-Ch-Ua-Platform:
      - '"Windows"'
      Upgrade-Insecure-Requests:
      - '1'
      User-Agent:
      - Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like
        Gecko) Chrome/116.0.0.0 Safari/537.36
      Accept:
      - text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
      Sec-Fetch-Site:
      - none
      Sec-Fetch-Mode:
      - navigate
      Sec-Fetch-User:
      - "?1"
      Sec-Fetch-Dest:
      - document
      Accept-Encoding:
      - gzip, deflate, br
      Accept-Language:
      - en-US,en;q=0.9
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=utf-8
      Last-Modified:
      - Sun, 28 Apr 2024 01:01:23 GMT
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000;
      X-Xss-Protection:
      - 1; mode=block
      Expect-Ct:
      - max-age=31536000
      Last-Published:
      - Wed, 21 Feb 2024 22:16:34 GMT
      Edge-Cache-Tag:
      - 116788FF.G,116788FF.P1061,116788FF.CMENU
      Granicusserver:
      - mse2p-viscmsba4
      X-Akamai-Transformed:
      - 9 - 0 pmb=mRUM,1
      Cache-Control:
      - public, max-age=600
      Expires:
      - Sun, 28 Apr 2024 01:18:55 GMT
      Date:
      - Sun, 28 Apr 2024 01:08:55 GMT
      Content-Length:
      - '118739'
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      Server-Timing:
      - ak_p; desc="1714266535711_399139781_1570497793_1476_7893_17_26_-";dur=1
      - cdn-cache; desc=HIT
      - edge; dur=15
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 28 Apr 2024 01:08:55 GMT
recorded_with: VCR 6.2.0
